name: workflow

on:
    push:
        branches:
            - master
        paths-ignore:
            - 'README.md'


jobs:
    integration:
        name: Continous Integration
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
            
            - name: Lint Code
              run: echo "Linting repository"
            
            - name: Run unit tests
              run: echo "Running unit tests"
    
    build-and-push-ecr-image:
        name: Continuous Delivery
        needs: integration
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Code
            uses: actions/checkout@v3
          
          - name: install utilities
            run:
              sudo apt-get update;
              sudo apt-get install -y jq unzip
          
          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
              aws-region: ${{ secrets.AWS_REGION }}
          
          - name: Login to AWS ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1
          
          - name: Build, tag, and push image to Amazon ECR
            id: build-image
            env:
              ECR_REGISTRY: ${{ secrets.AWS_ECR_LOGIN_URI }}
              ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
              IMAGE_TAG: latest
            run: |
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
              docker  push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    Continuous-Deployment:
      needs: build-and-push-ecr-image
      runs-on: self-hosted
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
            aws-region: ${{ secrets.AWS_REGION }}
        
        - name: Login to AWS ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
        
        - name: Pull latest image
          run: |
            docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}
        
        - name: Stop and Remove containers if running
          run: |
            if docker ps -q --filter "name=networksecurity13" | grep -q .; then
              docker stop networksecurity13 && docker rm -fv networksecurity13
            fi

        - name: Run Docker Image to serve users
          run: |
            docker run -d -p 8000:8000 --ipc ="host" --name=networksecurity13 -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}' ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
        
        - name: Clean previous images and containers
          run: |
            docker system prune -f