name: Production Deployment Pipeline

on:
  push:
    branches: [master]
    paths-ignore: ['README.md', 'docs/**']

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint Code
        run: echo "Running static code analysis"

      - name: Unit Tests
        run: echo "Executing test suite"

  cd:
    name: Continuous Delivery
    needs: ci
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Optimized Space Cleanup
        run: |
          # Always run (fast)
          sudo find /tmp -mindepth 1 -delete 2>/dev/null || true
          docker system prune -f
          
          # Only run heavy cleanups when needed
          if [ $(df / --output=avail | tail -1) -lt 5000000 ]; then
            echo "Low disk space - Running full cleanup"
            sudo rm -rf /usr/share/dotnet &
            sudo rm -rf /usr/local/lib/android &
            sudo apt-get clean &
            wait
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_LOGIN_URI }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker  push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    name: Production Deployment
    needs: cd
    runs-on: self-hosted
    environment: production

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deployment Cleanup
        run: |
          docker stop networksecurity13 || true
          docker rm -f networksecurity13 || true
          docker system prune -af

      - name: Run Container
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_LOGIN_URI }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker run -d \
            --name networksecurity13 \
            --restart unless-stopped \
            --ipc=host \
            -p 8080:8080 \
            -e DAGSHUB_USER="${{ secrets.DAGSHUB_USERNAME }}" \
            -e DAGSHUB_TOKEN="${{ secrets.DAGSHUB_ACCESS_TOKEN }}" \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_REGION="${{ secrets.AWS_REGION }}" \
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY}}:${{ env.IMAGE_TAG }}
            






# name: workflow

# on:
#     push:
#         branches:
#             - master
#         paths-ignore:
#             - 'README.md'


# jobs:
#     integration:
#         name: Continous Integration
#         runs-on: ubuntu-latest
#         steps:
#             - name: Checkout Code
#               uses: actions/checkout@v3
            
#             - name: Lint Code
#               run: echo "Linting repository"
            
#             - name: Run unit tests
#               run: echo "Running unit tests"
    
#     build-and-push-ecr-image:
#         name: Continuous Delivery
#         needs: integration
#         runs-on: ubuntu-latest
#         steps:
#           - name: Checkout Code
#             uses: actions/checkout@v3
          
#           - name: install utilities
#             run:
#               sudo apt-get update;
#               sudo apt-get install -y jq unzip
          
#           - name: Configure AWS Credentials
#             uses: aws-actions/configure-aws-credentials@v1
#             with:
#               aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
#               aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
#               aws-region: ${{ secrets.AWS_REGION }}
          
#           - name: Login to AWS ECR
#             id: login-ecr
#             uses: aws-actions/amazon-ecr-login@v1
          
#           - name: Build, tag, and push image to Amazon ECR
#             id: build-image
#             env:
#               ECR_REGISTRY: ${{ secrets.AWS_ECR_LOGIN_URI }}
#               ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
#               IMAGE_TAG: latest
#             run: |
#               docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#               docker  push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#               echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#     Continuous-Deployment:
#       needs: build-and-push-ecr-image
#       runs-on: self-hosted
#       steps:
#         - name: Checkout
#           uses: actions/checkout@v3
        
#         - name: Configure AWS Credentials
#           uses: aws-actions/configure-aws-credentials@v1
#           with:
#             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
#             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
#             aws-region: ${{ secrets.AWS_REGION }}
        
#         - name: Login to AWS ECR
#           id: login-ecr
#           uses: aws-actions/amazon-ecr-login@v1
        
#         - name: Pull latest image
#           run: |
#             docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}
        
#         - name: Stop and Remove containers if running
#           run: |
#             if docker ps -q --filter "name=networksecurity13" | grep -q .; then
#               docker stop networksecurity13 && docker rm -fv networksecurity13 && docker container prune -f && docker image prune -f && docker volume prune -f && docker system prune -f
#             fi

#         - name: Run Docker Image to serve users
#           run: |
#             docker run -d -p 8080:8080 --ipc ="host" --name=networksecurity13 -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}' ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
        
#         - name: Clean previous images and containers
#           run: |
#             docker system prune -f